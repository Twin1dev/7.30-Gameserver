#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CubeOverlapActor

#include "Basic.hpp"

#include "CubeOverlapActor_classes.hpp"
#include "CubeOverlapActor_parameters.hpp"


namespace SDK
{

// Function CubeOverlapActor.CubeOverlapActor_C.ExecuteUbergraph_CubeOverlapActor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACubeOverlapActor_C::ExecuteUbergraph_CubeOverlapActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "ExecuteUbergraph_CubeOverlapActor");

	Params::CubeOverlapActor_C_ExecuteUbergraph_CubeOverlapActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CubeOverlapActor.CubeOverlapActor_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ACubeOverlapActor_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CubeOverlapActor.CubeOverlapActor_C.ZapVehicle
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortAthenaVehicle*               Vehicle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACubeOverlapActor_C::ZapVehicle(class AFortAthenaVehicle* Vehicle, const struct FVector& Normal, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "ZapVehicle");

	Params::CubeOverlapActor_C_ZapVehicle Parms{};

	Parms.Vehicle = Vehicle;
	Parms.Normal = std::move(Normal);
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CubeOverlapActor.CubeOverlapActor_C.CubeRuneWub
// (BlueprintCallable, BlueprintEvent)

void ACubeOverlapActor_C::CubeRuneWub()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "CubeRuneWub");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CubeOverlapActor.CubeOverlapActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ACubeOverlapActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CubeOverlapActor.CubeOverlapActor_C.TraceDownward
// (BlueprintCallable, BlueprintEvent)

void ACubeOverlapActor_C::TraceDownward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "TraceDownward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CubeOverlapActor.CubeOverlapActor_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACubeOverlapActor_C::BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");

	Params::CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CubeOverlapActor.CubeOverlapActor_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ACubeOverlapActor_C::BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::CubeOverlapActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CubeOverlapActor.CubeOverlapActor_C.CubeBounceFX
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACubeOverlapActor_C::CubeBounceFX(const struct FVector& Location, const struct FVector& Normal, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "CubeBounceFX");

	Params::CubeOverlapActor_C_CubeBounceFX Parms{};

	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CubeOverlapActor.CubeOverlapActor_C.CubeRetaliationTelegraph
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACubeOverlapActor_C::CubeRetaliationTelegraph()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "CubeRetaliationTelegraph");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CubeOverlapActor.CubeOverlapActor_C.SpawnGC
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           GCTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACubeOverlapActor_C::SpawnGC(class AActor* GCTarget, const struct FVector& Location, const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "SpawnGC");

	Params::CubeOverlapActor_C_SpawnGC Parms{};

	Parms.GCTarget = GCTarget;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CubeOverlapActor.CubeOverlapActor_C.ZapPlayer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  InstigatingPlayer                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACubeOverlapActor_C::ZapPlayer(class AFortPlayerPawn* InstigatingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "ZapPlayer");

	Params::CubeOverlapActor_C_ZapPlayer Parms{};

	Parms.InstigatingPlayer = InstigatingPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CubeOverlapActor.CubeOverlapActor_C.CubeBounceFlash__UpdateFunc
// (BlueprintEvent)

void ACubeOverlapActor_C::CubeBounceFlash__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "CubeBounceFlash__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CubeOverlapActor.CubeOverlapActor_C.CubeBounceFlash__FinishedFunc
// (BlueprintEvent)

void ACubeOverlapActor_C::CubeBounceFlash__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "CubeBounceFlash__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CubeOverlapActor.CubeOverlapActor_C.CubeRetaliationGlow__UpdateFunc
// (BlueprintEvent)

void ACubeOverlapActor_C::CubeRetaliationGlow__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "CubeRetaliationGlow__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CubeOverlapActor.CubeOverlapActor_C.CubeRetaliationGlow__FinishedFunc
// (BlueprintEvent)

void ACubeOverlapActor_C::CubeRetaliationGlow__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "CubeRetaliationGlow__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CubeOverlapActor.CubeOverlapActor_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ACubeOverlapActor_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CubeOverlapActor.CubeOverlapActor_C.GetSocketClosestToTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LookAtDirection                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          SocketLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACubeOverlapActor_C::GetSocketClosestToTarget(class AActor* TargetPlayer, struct FVector* LookAtDirection, struct FVector* SocketLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CubeOverlapActor_C", "GetSocketClosestToTarget");

	Params::CubeOverlapActor_C_GetSocketClosestToTarget Parms{};

	Parms.TargetPlayer = TargetPlayer;

	UObject::ProcessEvent(Func, &Parms);

	if (LookAtDirection != nullptr)
		*LookAtDirection = std::move(Parms.LookAtDirection);

	if (SocketLocation != nullptr)
		*SocketLocation = std::move(Parms.SocketLocation);
}

}

