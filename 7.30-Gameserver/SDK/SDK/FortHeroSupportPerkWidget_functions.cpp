#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortHeroSupportPerkWidget

#include "Basic.hpp"

#include "FortHeroSupportPerkWidget_classes.hpp"
#include "FortHeroSupportPerkWidget_parameters.hpp"


namespace SDK
{

// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.ExecuteUbergraph_FortHeroSupportPerkWidget
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFortHeroSupportPerkWidget_C::ExecuteUbergraph_FortHeroSupportPerkWidget(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHeroSupportPerkWidget_C", "ExecuteUbergraph_FortHeroSupportPerkWidget");

	Params::FortHeroSupportPerkWidget_C_ExecuteUbergraph_FortHeroSupportPerkWidget Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.OnStateChanged
// (Event, Public, BlueprintEvent)

void UFortHeroSupportPerkWidget_C::OnStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHeroSupportPerkWidget_C", "OnStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UFortHeroSupportPerkWidget_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHeroSupportPerkWidget_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.OnSupportTypeUpdated
// (Event, Public, BlueprintEvent)

void UFortHeroSupportPerkWidget_C::OnSupportTypeUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHeroSupportPerkWidget_C", "OnSupportTypeUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.OnHeroUpdated
// (Event, Public, BlueprintEvent)

void UFortHeroSupportPerkWidget_C::OnHeroUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHeroSupportPerkWidget_C", "OnHeroUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.Update
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_DisplayedOutsideOfHeroSquad                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EFortSupportBonusType                   TargetedSupportType                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UFortHeroSupportPerkWidget_C::Update(bool Param_DisplayedOutsideOfHeroSquad, EFortSupportBonusType TargetedSupportType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHeroSupportPerkWidget_C", "Update");

	Params::FortHeroSupportPerkWidget_C_Update Parms{};

	Parms.Param_DisplayedOutsideOfHeroSquad = Param_DisplayedOutsideOfHeroSquad;
	Parms.TargetedSupportType = TargetedSupportType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.UpdateVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UFortHeroSupportPerkWidget_C::UpdateVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHeroSupportPerkWidget_C", "UpdateVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.UpdateLockedVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UFortHeroSupportPerkWidget_C::UpdateLockedVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHeroSupportPerkWidget_C", "UpdateLockedVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.UpdateActiveDisplay
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UFortHeroSupportPerkWidget_C::UpdateActiveDisplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHeroSupportPerkWidget_C", "UpdateActiveDisplay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.UpdateEmptyVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UFortHeroSupportPerkWidget_C::UpdateEmptyVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHeroSupportPerkWidget_C", "UpdateEmptyVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.UpdateComparisonVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UFortHeroSupportPerkWidget_C::UpdateComparisonVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHeroSupportPerkWidget_C", "UpdateComparisonVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortHeroSupportPerkWidget.FortHeroSupportPerkWidget_C.IsInInvalidSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    InInvalidSlot                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UFortHeroSupportPerkWidget_C::IsInInvalidSlot(bool* InInvalidSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortHeroSupportPerkWidget_C", "IsInInvalidSlot");

	Params::FortHeroSupportPerkWidget_C_IsInInvalidSlot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InInvalidSlot != nullptr)
		*InInvalidSlot = Parms.InInvalidSlot;
}

}

