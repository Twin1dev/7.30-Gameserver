#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Beam

#include "Basic.hpp"

#include "B_Beam_classes.hpp"
#include "B_Beam_parameters.hpp"


namespace SDK
{

// Function B_Beam.B_Beam_C.ExecuteUbergraph_B_Beam
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Beam_C::ExecuteUbergraph_B_Beam(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Beam_C", "ExecuteUbergraph_B_Beam");

	Params::B_Beam_C_ExecuteUbergraph_B_Beam Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Beam.B_Beam_C.CE_Trigger
// (BlueprintCallable, BlueprintEvent)

void AB_Beam_C::CE_Trigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Beam_C", "CE_Trigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Beam.B_Beam_C.Update Offset
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_Beam_C::Update_Offset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Beam_C", "Update Offset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Beam.B_Beam_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Beam_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Beam_C", "ReceiveTick");

	Params::B_Beam_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Beam.B_Beam_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_Beam_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Beam_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Beam.B_Beam_C.Timeline_0__UpdateFunc
// (BlueprintEvent)

void AB_Beam_C::Timeline_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Beam_C", "Timeline_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Beam.B_Beam_C.Timeline_0__FinishedFunc
// (BlueprintEvent)

void AB_Beam_C::Timeline_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Beam_C", "Timeline_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Beam.B_Beam_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AB_Beam_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Beam_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Beam.B_Beam_C.UpdateBeamPosAndRot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AimTarget                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     SimulateOffset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Beam_C::UpdateBeamPosAndRot(const class AActor* AimTarget, const struct FLinearColor& SimulateOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Beam_C", "UpdateBeamPosAndRot");

	Params::B_Beam_C_UpdateBeamPosAndRot Parms{};

	Parms.AimTarget = AimTarget;
	Parms.SimulateOffset = std::move(SimulateOffset);

	UObject::ProcessEvent(Func, &Parms);
}

}

