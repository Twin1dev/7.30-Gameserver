#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Paper2D

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "Paper2D_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class Paper2D.PaperRuntimeSettings
// 0x0008 (0x0030 - 0x0028)
class UPaperRuntimeSettings final : public UObject
{
public:
	bool                                          bEnableSpriteAtlasGroups;                          // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTerrainSplineEditing;                       // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResizeSpriteDataToMatchTextures;                  // 0x002A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1101[0x5];                                     // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperRuntimeSettings">();
	}
	static class UPaperRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperRuntimeSettings>();
	}
};

// Class Paper2D.MaterialExpressionSpriteTextureSampler
// 0x0020 (0x0120 - 0x0100)
class UMaterialExpressionSpriteTextureSampler final : public UMaterialExpressionTextureSampleParameter2D
{
public:
	bool                                          bSampleAdditionalTextures;                         // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1102[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AdditionalSlotIndex;                               // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SlotDisplayName;                                   // 0x0108(0x0018)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionSpriteTextureSampler">();
	}
	static class UMaterialExpressionSpriteTextureSampler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionSpriteTextureSampler>();
	}
};

// Class Paper2D.PaperCharacter
// 0x0000 (0x0750 - 0x0750)
class APaperCharacter final : public ACharacter
{
public:
	class UPaperFlipbookComponent*                Sprite;                                            // 0x0748(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperCharacter">();
	}
	static class APaperCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperCharacter>();
	}
};

// Class Paper2D.PaperFlipbook
// 0x0028 (0x0050 - 0x0028)
class UPaperFlipbook final : public UObject
{
public:
	float                                         FramesPerSecond;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1103[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPaperFlipbookKeyFrame>         KeyFrames;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     DefaultMaterial;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFlipbookCollisionMode                        CollisionSource;                                   // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1104[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetKeyFrameIndexAtTime(float Time, bool bClampToEnds) const;
	int32 GetNumFrames() const;
	int32 GetNumKeyFrames() const;
	class UPaperSprite* GetSpriteAtFrame(int32 FrameIndex) const;
	class UPaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds) const;
	float GetTotalDuration() const;
	bool IsValidKeyFrameIndex(int32 Param_Index) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperFlipbook">();
	}
	static class UPaperFlipbook* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperFlipbook>();
	}
};

// Class Paper2D.PaperFlipbookActor
// 0x0008 (0x0338 - 0x0330)
class APaperFlipbookActor final : public AActor
{
public:
	class UPaperFlipbookComponent*                RenderComponent;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperFlipbookActor">();
	}
	static class APaperFlipbookActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperFlipbookActor>();
	}
};

// Class Paper2D.PaperFlipbookComponent
// 0x0050 (0x05F0 - 0x05A0)
class UPaperFlipbookComponent final : public UMeshComponent
{
public:
	class UPaperFlipbook*                         SourceFlipbook;                                    // 0x05A0(0x0008)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     Material;                                          // 0x05A8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayRate;                                          // 0x05B0(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bLooping : 1;                                      // 0x05B4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bReversePlayback : 1;                              // 0x05B4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bPlaying : 1;                                      // 0x05B4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1109[0x3];                                     // 0x05B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccumulatedTime;                                   // 0x05B8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CachedFrameIndex;                                  // 0x05BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           SpriteColor;                                       // 0x05C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBodySetup*                             CachedBodySetup;                                   // 0x05D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnFinishedPlaying;                                 // 0x05D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_110A[0x8];                                     // 0x05E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPaperFlipbook* GetFlipbook();
	void OnRep_SourceFlipbook(class UPaperFlipbook* OldFlipbook);
	void Play();
	void PlayFromStart();
	void Reverse();
	void ReverseFromEnd();
	bool SetFlipbook(class UPaperFlipbook* NewFlipbook);
	void SetLooping(bool bNewLooping);
	void SetNewTime(float NewTime);
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);
	void SetPlaybackPositionInFrames(int32 NewFramePosition, bool bFireEvents);
	void SetPlayRate(float NewRate);
	void SetSpriteColor(const struct FLinearColor& NewColor);
	void Stop();

	float GetFlipbookFramerate() const;
	float GetFlipbookLength() const;
	int32 GetFlipbookLengthInFrames() const;
	float GetPlaybackPosition() const;
	int32 GetPlaybackPositionInFrames() const;
	float GetPlayRate() const;
	bool IsLooping() const;
	bool IsPlaying() const;
	bool IsReversing() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperFlipbookComponent">();
	}
	static class UPaperFlipbookComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperFlipbookComponent>();
	}
};

// Class Paper2D.PaperGroupedSpriteActor
// 0x0008 (0x0338 - 0x0330)
class APaperGroupedSpriteActor final : public AActor
{
public:
	class UPaperGroupedSpriteComponent*           RenderComponent;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGroupedSpriteActor">();
	}
	static class APaperGroupedSpriteActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGroupedSpriteActor>();
	}
};

// Class Paper2D.PaperGroupedSpriteComponent
// 0x0030 (0x05D0 - 0x05A0)
class UPaperGroupedSpriteComponent final : public UMeshComponent
{
public:
	TArray<class UMaterialInterface*>             InstanceMaterials;                                 // 0x05A0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSpriteInstanceData>            PerInstanceSpriteData;                             // 0x05B0(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_110E[0x10];                                    // 0x05C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 AddInstance(const struct FTransform& Transform, class UPaperSprite* Sprite, bool bWorldSpace, const struct FLinearColor& Color);
	void ClearInstances();
	bool RemoveInstance(int32 InstanceIndex);
	void SortInstancesAlongAxis(const struct FVector& WorldSpaceSortAxis);
	bool UpdateInstanceColor(int32 InstanceIndex, const struct FLinearColor& NewInstanceColor, bool bMarkRenderStateDirty);
	bool UpdateInstanceTransform(int32 InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);

	int32 GetInstanceCount() const;
	bool GetInstanceTransform(int32 InstanceIndex, struct FTransform* OutInstanceTransform, bool bWorldSpace) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGroupedSpriteComponent">();
	}
	static class UPaperGroupedSpriteComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGroupedSpriteComponent>();
	}
};

// Class Paper2D.PaperSprite
// 0x0098 (0x00C0 - 0x0028)
class UPaperSprite final : public UObject
{
public:
	uint8                                         Pad_1116[0x10];                                    // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SourceUV;                                          // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              SourceDimension;                                   // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             SourceTexture;                                     // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UTexture*>                       AdditionalSourceTextures;                          // 0x0050(0x0010)(Edit, ZeroConstructor, AssetRegistrySearchable, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              BakedSourceUV;                                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              BakedSourceDimension;                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             BakedSourceTexture;                                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     DefaultMaterial;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     AlternateMaterial;                                 // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FPaperSpriteSocket>             Sockets;                                           // 0x0088(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	ESpriteCollisionMode                          SpriteCollisionDomain;                             // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1117[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PixelsPerUnrealUnit;                               // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBodySetup*                             BodySetup;                                         // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlternateMaterialSplitIndex;                       // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1118[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector4>                       BakedRenderData;                                   // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperSprite">();
	}
	static class UPaperSprite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperSprite>();
	}
};

// Class Paper2D.PaperSpriteActor
// 0x0008 (0x0338 - 0x0330)
class APaperSpriteActor final : public AActor
{
public:
	class UPaperSpriteComponent*                  RenderComponent;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperSpriteActor">();
	}
	static class APaperSpriteActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperSpriteActor>();
	}
};

// Class Paper2D.PaperSpriteAtlas
// 0x0000 (0x0028 - 0x0028)
class UPaperSpriteAtlas final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperSpriteAtlas">();
	}
	static class UPaperSpriteAtlas* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperSpriteAtlas>();
	}
};

// Class Paper2D.PaperSpriteBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UPaperSpriteBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FSlateBrush MakeBrushFromSprite(class UPaperSprite* Sprite, int32 Width, int32 Height);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperSpriteBlueprintLibrary">();
	}
	static class UPaperSpriteBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperSpriteBlueprintLibrary>();
	}
};

// Class Paper2D.PaperSpriteComponent
// 0x0020 (0x05C0 - 0x05A0)
class UPaperSpriteComponent final : public UMeshComponent
{
public:
	class UPaperSprite*                           SourceSprite;                                      // 0x05A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     MaterialOverride;                                  // 0x05A8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           SpriteColor;                                       // 0x05B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UPaperSprite* GetSprite();
	bool SetSprite(class UPaperSprite* NewSprite);
	void SetSpriteColor(const struct FLinearColor& NewColor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperSpriteComponent">();
	}
	static class UPaperSpriteComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperSpriteComponent>();
	}
};

// Class Paper2D.PaperTerrainActor
// 0x0018 (0x0348 - 0x0330)
class APaperTerrainActor final : public AActor
{
public:
	class USceneComponent*                        DummyRoot;                                         // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperTerrainSplineComponent*           SplineComponent;                                   // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperTerrainComponent*                 RenderComponent;                                   // 0x0340(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperTerrainActor">();
	}
	static class APaperTerrainActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperTerrainActor>();
	}
};

// Class Paper2D.PaperTerrainComponent
// 0x0060 (0x05D0 - 0x0570)
class UPaperTerrainComponent final : public UPrimitiveComponent
{
public:
	class UPaperTerrainMaterial*                  TerrainMaterial;                                   // 0x0570(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClosedSpline;                                     // 0x0578(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFilledSpline;                                     // 0x0579(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111A[0x6];                                     // 0x057A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperTerrainSplineComponent*           AssociatedSpline;                                  // 0x0580(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0588(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SegmentOverlapAmount;                              // 0x058C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TerrainColor;                                      // 0x0590(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ReparamStepsPerSegment;                            // 0x05A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESpriteCollisionMode                          SpriteCollisionDomain;                             // 0x05A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_111B[0x3];                                     // 0x05A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionThickness;                                // 0x05A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_111C[0x4];                                     // 0x05AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBodySetup*                             CachedBodySetup;                                   // 0x05B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_111D[0x18];                                    // 0x05B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTerrainColor(const struct FLinearColor& NewColor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperTerrainComponent">();
	}
	static class UPaperTerrainComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperTerrainComponent>();
	}
};

// Class Paper2D.PaperTerrainMaterial
// 0x0018 (0x0048 - 0x0030)
class UPaperTerrainMaterial final : public UDataAsset
{
public:
	TArray<struct FPaperTerrainMaterialRule>      Rules;                                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPaperSprite*                           InteriorFill;                                      // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperTerrainMaterial">();
	}
	static class UPaperTerrainMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperTerrainMaterial>();
	}
};

// Class Paper2D.PaperTerrainSplineComponent
// 0x0010 (0x0670 - 0x0660)
class UPaperTerrainSplineComponent final : public USplineComponent
{
public:
	uint8                                         Pad_111E[0x10];                                    // 0x0660(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperTerrainSplineComponent">();
	}
	static class UPaperTerrainSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperTerrainSplineComponent>();
	}
};

// Class Paper2D.PaperTileLayer
// 0x0070 (0x0098 - 0x0028)
class UPaperTileLayer final : public UObject
{
public:
	class FText                                   LayerName;                                         // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         LayerWidth;                                        // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LayerHeight;                                       // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bHiddenInGame : 1;                                 // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bLayerCollides : 1;                                // 0x0048(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bOverrideCollisionThickness : 1;                   // 0x0048(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bOverrideCollisionOffset : 1;                      // 0x0048(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_111F[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionThicknessOverride;                        // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CollisionOffsetOverride;                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           LayerColor;                                        // 0x0054(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AllocatedWidth;                                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AllocatedHeight;                                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1120[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPaperTileInfo>                 AllocatedCells;                                    // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UPaperTileSet*                          TileSet;                                           // 0x0080(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 AllocatedGrid;                                     // 0x0088(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperTileLayer">();
	}
	static class UPaperTileLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperTileLayer>();
	}
};

// Class Paper2D.PaperTileMap
// 0x0080 (0x00A8 - 0x0028)
class UPaperTileMap final : public UObject
{
public:
	int32                                         MapWidth;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapHeight;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileWidth;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileHeight;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PixelsPerUnrealUnit;                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeparationPerTileX;                                // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeparationPerTileY;                                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeparationPerLayer;                                // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPaperTileSet>           SelectedTileSet;                                   // 0x0048(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPaperTileLayer*>                TileLayers;                                        // 0x0078(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         CollisionThickness;                                // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESpriteCollisionMode                          SpriteCollisionDomain;                             // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETileMapProjectionMode                        ProjectionMode;                                    // 0x008D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1121[0x2];                                     // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HexSideLength;                                     // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1122[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBodySetup*                             BodySetup;                                         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerNameIndex;                                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1123[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperTileMap">();
	}
	static class UPaperTileMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperTileMap>();
	}
};

// Class Paper2D.PaperTileMapActor
// 0x0008 (0x0338 - 0x0330)
class APaperTileMapActor final : public AActor
{
public:
	class UPaperTileMapComponent*                 RenderComponent;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperTileMapActor">();
	}
	static class APaperTileMapActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperTileMapActor>();
	}
};

// Class Paper2D.PaperTileMapComponent
// 0x0050 (0x05F0 - 0x05A0)
class UPaperTileMapComponent final : public UMeshComponent
{
public:
	int32                                         MapWidth;                                          // 0x05A0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MapHeight;                                         // 0x05A4(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TileWidth;                                         // 0x05A8(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TileHeight;                                        // 0x05AC(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperTileSet*                          DefaultLayerTileSet;                               // 0x05B0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Material;                                          // 0x05B8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UPaperTileLayer*>                TileLayers;                                        // 0x05C0(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	struct FLinearColor                           TileMapColor;                                      // 0x05D0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         UseSingleLayerIndex;                               // 0x05E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseSingleLayer;                                   // 0x05E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1124[0x3];                                     // 0x05E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperTileMap*                          TileMap;                                           // 0x05E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UPaperTileLayer* AddNewLayer();
	void CreateNewTileMap(int32 Param_MapWidth, int32 Param_MapHeight, int32 Param_TileWidth, int32 Param_TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);
	void GetMapSize(int32* Param_MapWidth, int32* Param_MapHeight, int32* NumLayers);
	void MakeTileMapEditable();
	void RebuildCollision();
	void ResizeMap(int32 NewWidthInTiles, int32 NewHeightInTiles);
	void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);
	void SetLayerCollision(int32 Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);
	void SetLayerColor(const struct FLinearColor& NewColor, int32 Layer);
	void SetTile(int32 X, int32 Y, int32 Layer, const struct FPaperTileInfo& NewValue);
	bool SetTileMap(class UPaperTileMap* NewTileMap);
	void SetTileMapColor(const struct FLinearColor& NewColor);

	struct FLinearColor GetLayerColor(int32 Layer) const;
	struct FPaperTileInfo GetTile(int32 X, int32 Y, int32 Layer) const;
	struct FVector GetTileCenterPosition(int32 TileX, int32 TileY, int32 LayerIndex, bool bWorldSpace) const;
	struct FVector GetTileCornerPosition(int32 TileX, int32 TileY, int32 LayerIndex, bool bWorldSpace) const;
	struct FLinearColor GetTileMapColor() const;
	void GetTilePolygon(int32 TileX, int32 TileY, TArray<struct FVector>* Points, int32 LayerIndex, bool bWorldSpace) const;
	bool OwnsTileMap() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperTileMapComponent">();
	}
	static class UPaperTileMapComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperTileMapComponent>();
	}
};

// Class Paper2D.PaperTileSet
// 0x0080 (0x00A8 - 0x0028)
class UPaperTileSet final : public UObject
{
public:
	struct FIntPoint                              TileSize;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture2D*                             TileSheet;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UTexture*>                       AdditionalSourceTextures;                          // 0x0038(0x0010)(Edit, ZeroConstructor, AssetRegistrySearchable, NativeAccessSpecifierPrivate)
	struct FIntMargin                             BorderMargin;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	struct FIntPoint                              PerTileSpacing;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FIntPoint                              DrawingOffset;                                     // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         WidthInTiles;                                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         HeightInTiles;                                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AllocatedWidth;                                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AllocatedHeight;                                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FPaperTileMetadata>             PerTileData;                                       // 0x0078(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FPaperTileSetTerrain>           Terrains;                                          // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         TileWidth;                                         // 0x0098(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TileHeight;                                        // 0x009C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Margin;                                            // 0x00A0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Spacing;                                           // 0x00A4(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperTileSet">();
	}
	static class UPaperTileSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperTileSet>();
	}
};

// Class Paper2D.TileMapBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UTileMapBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BreakTile(const struct FPaperTileInfo& Tile, int32* TileIndex, class UPaperTileSet** TileSet, bool* bFlipH, bool* bFlipV, bool* bFlipD);
	static struct FTransform GetTileTransform(const struct FPaperTileInfo& Tile);
	static class FName GetTileUserData(const struct FPaperTileInfo& Tile);
	static struct FPaperTileInfo MakeTile(int32 TileIndex, class UPaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TileMapBlueprintLibrary">();
	}
	static class UTileMapBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTileMapBlueprintLibrary>();
	}
};

}

