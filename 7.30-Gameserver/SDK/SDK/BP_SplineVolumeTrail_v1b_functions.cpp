#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineVolumeTrail_v1b

#include "Basic.hpp"

#include "BP_SplineVolumeTrail_v1b_classes.hpp"
#include "BP_SplineVolumeTrail_v1b_parameters.hpp"


namespace SDK
{

// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.ExecuteUbergraph_BP_SplineVolumeTrail_v1b
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineVolumeTrail_v1b_C::ExecuteUbergraph_BP_SplineVolumeTrail_v1b(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "ExecuteUbergraph_BP_SplineVolumeTrail_v1b");

	Params::BP_SplineVolumeTrail_v1b_C_ExecuteUbergraph_BP_SplineVolumeTrail_v1b Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.GenerateCurveTextures
// (BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::GenerateCurveTextures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "GenerateCurveTextures");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.ClearRenderTarget
// (BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::ClearRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "ClearRenderTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.Recently Rendered Check
// (BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::Recently_Rendered_Check()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "Recently Rendered Check");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.Tick Interval LOD Check
// (BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::Tick_Interval_LOD_Check()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "Tick Interval LOD Check");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.ManuallyStopSplineSystem
// (BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::ManuallyStopSplineSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "ManuallyStopSplineSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.DebugMode_Rotate
// (BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::DebugMode_Rotate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "DebugMode_Rotate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.SplineSystemDurationReached
// (BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::SplineSystemDurationReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "SplineSystemDurationReached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineVolumeTrail_v1b_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "ReceiveTick");

	Params::BP_SplineVolumeTrail_v1b_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.DebugRotateTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::DebugRotateTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "DebugRotateTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.DebugRotateTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::DebugRotateTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "DebugRotateTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.AddSplineMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::AddSplineMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "AddSplineMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.SetStartAndEndSplineMesh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Update_Spline_Mesh                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SplineVolumeTrail_v1b_C::SetStartAndEndSplineMesh(bool Update_Spline_Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "SetStartAndEndSplineMesh");

	Params::BP_SplineVolumeTrail_v1b_C_SetStartAndEndSplineMesh Parms{};

	Parms.Update_Spline_Mesh = Update_Spline_Mesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.AddSplinePoint
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::AddSplinePoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "AddSplinePoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.UpdateSplinePointPosition
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::UpdateSplinePointPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "UpdateSplinePointPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.SplineTimestampManagement
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::SplineTimestampManagement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "SplineTimestampManagement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.ScaleSplineMesh
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::ScaleSplineMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "ScaleSplineMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.UpdateMID
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::UpdateMID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "UpdateMID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.UpdateParticleSystemPosition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::UpdateParticleSystemPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "UpdateParticleSystemPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.RollSplineMesh
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::RollSplineMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "RollSplineMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.SetForwardAxisOnSplineMesh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineMeshComponent*             SplineMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineVolumeTrail_v1b_C::SetForwardAxisOnSplineMesh(class USplineMeshComponent* SplineMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "SetForwardAxisOnSplineMesh");

	Params::BP_SplineVolumeTrail_v1b_C_SetForwardAxisOnSplineMesh Parms{};

	Parms.SplineMesh = SplineMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.SetNewSplinePointsBool
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::SetNewSplinePointsBool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "SetNewSplinePointsBool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.AddSplineDistanceCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_SplineVolumeTrail_v1b_C::AddSplineDistanceCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "AddSplineDistanceCheck");

	Params::BP_SplineVolumeTrail_v1b_C_AddSplineDistanceCheck Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.SetWasRecentlyRendered
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::SetWasRecentlyRendered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "SetWasRecentlyRendered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.TickIntervalLODCheck
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::TickIntervalLODCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "TickIntervalLODCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.GetLinearColorFromCurveAtTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCurveLinearColor*                Curve_Linear_Color                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     LinearColorOut                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineVolumeTrail_v1b_C::GetLinearColorFromCurveAtTime(class UCurveLinearColor* Curve_Linear_Color, int32 Param_Index, struct FLinearColor* LinearColorOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "GetLinearColorFromCurveAtTime");

	Params::BP_SplineVolumeTrail_v1b_C_GetLinearColorFromCurveAtTime Parms{};

	Parms.Curve_Linear_Color = Curve_Linear_Color;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (LinearColorOut != nullptr)
		*LinearColorOut = std::move(Parms.LinearColorOut);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.RedistributePointsAlongSpline
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::RedistributePointsAlongSpline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "RedistributePointsAlongSpline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.SplineUpdateOnTick
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::SplineUpdateOnTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "SplineUpdateOnTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.ReturnSplineMeshToPool
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineMeshComponent*             SplineMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   IndexToRemove                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineVolumeTrail_v1b_C::ReturnSplineMeshToPool(class USplineMeshComponent* SplineMesh, int32 IndexToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "ReturnSplineMeshToPool");

	Params::BP_SplineVolumeTrail_v1b_C_ReturnSplineMeshToPool Parms{};

	Parms.SplineMesh = SplineMesh;
	Parms.IndexToRemove = IndexToRemove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.BakeLinearColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCurveLinearColor*                Curve_Linear_Color                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Pixel__X_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     LinearColorOut                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineVolumeTrail_v1b_C::BakeLinearColor(class UCurveLinearColor* Curve_Linear_Color, int32 Pixel__X_, struct FLinearColor* LinearColorOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "BakeLinearColor");

	Params::BP_SplineVolumeTrail_v1b_C_BakeLinearColor Parms{};

	Parms.Curve_Linear_Color = Curve_Linear_Color;
	Parms.Pixel__X_ = Pixel__X_;

	UObject::ProcessEvent(Func, &Parms);

	if (LinearColorOut != nullptr)
		*LinearColorOut = std::move(Parms.LinearColorOut);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.DestroyAllSplineMeshes
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::DestroyAllSplineMeshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "DestroyAllSplineMeshes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.SetStartAndEndAllSplineMeshes
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Update_All_Spline_Meshes                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SplineVolumeTrail_v1b_C::SetStartAndEndAllSplineMeshes(bool Update_All_Spline_Meshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "SetStartAndEndAllSplineMeshes");

	Params::BP_SplineVolumeTrail_v1b_C_SetStartAndEndAllSplineMeshes Parms{};

	Parms.Update_All_Spline_Meshes = Update_All_Spline_Meshes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.GetSocketLocationWS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Socket_Name                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location_WS                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineVolumeTrail_v1b_C::GetSocketLocationWS(class FName Socket_Name, struct FVector* Location_WS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "GetSocketLocationWS");

	Params::BP_SplineVolumeTrail_v1b_C_GetSocketLocationWS Parms{};

	Parms.Socket_Name = Socket_Name;

	UObject::ProcessEvent(Func, &Parms);

	if (Location_WS != nullptr)
		*Location_WS = std::move(Parms.Location_WS);
}


// Function BP_SplineVolumeTrail_v1b.BP_SplineVolumeTrail_v1b_C.UpdateCheapSplinesWPOVectors
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineVolumeTrail_v1b_C::UpdateCheapSplinesWPOVectors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineVolumeTrail_v1b_C", "UpdateCheapSplinesWPOVectors");

	UObject::ProcessEvent(Func, nullptr);
}

}

