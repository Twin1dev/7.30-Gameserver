#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GamepadMappingInfo

#include "Basic.hpp"

#include "GamepadMappingInfo_classes.hpp"
#include "GamepadMappingInfo_parameters.hpp"


namespace SDK
{

// Function GamepadMappingInfo.GamepadMappingInfo_C.ExecuteUbergraph_GamepadMappingInfo
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadMappingInfo_C::ExecuteUbergraph_GamepadMappingInfo(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "ExecuteUbergraph_GamepadMappingInfo");

	Params::GamepadMappingInfo_C_ExecuteUbergraph_GamepadMappingInfo Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.Update Controller Images
// (BlueprintCallable, BlueprintEvent)

void UGamepadMappingInfo_C::Update_Controller_Images()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "Update Controller Images");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UGamepadMappingInfo_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.OnLoaded_A196D7E54164016324DF5A9755C679BD
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadMappingInfo_C::OnLoaded_A196D7E54164016324DF5A9755C679BD(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "OnLoaded_A196D7E54164016324DF5A9755C679BD");

	Params::GamepadMappingInfo_C_OnLoaded_A196D7E54164016324DF5A9755C679BD Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.OnLoaded_67B412844D12E60AF9677EAF507D3D57
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadMappingInfo_C::OnLoaded_67B412844D12E60AF9677EAF507D3D57(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "OnLoaded_67B412844D12E60AF9677EAF507D3D57");

	Params::GamepadMappingInfo_C_OnLoaded_67B412844D12E60AF9677EAF507D3D57 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.Update Displayed Mapping
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Platform                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Configuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadMappingInfo_C::Update_Displayed_Mapping(int32 Platform, int32 Mode, int32 Configuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "Update Displayed Mapping");

	Params::GamepadMappingInfo_C_Update_Displayed_Mapping Parms{};

	Parms.Platform = Platform;
	Parms.Mode = Mode;
	Parms.Configuration = Configuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.OnConfigChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Config                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadMappingInfo_C::OnConfigChanged(int32 Mode, int32 Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "OnConfigChanged");

	Params::GamepadMappingInfo_C_OnConfigChanged Parms{};

	Parms.Mode = Mode;
	Parms.Config = Config;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.HandleConfigChanged_Athena
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Config                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadMappingInfo_C::HandleConfigChanged_Athena(int32 Mode, int32 Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "HandleConfigChanged_Athena");

	Params::GamepadMappingInfo_C_HandleConfigChanged_Athena Parms{};

	Parms.Mode = Mode;
	Parms.Config = Config;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.HandleConfigChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Config                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadMappingInfo_C::HandleConfigChanged(int32 Mode, int32 Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "HandleConfigChanged");

	Params::GamepadMappingInfo_C_HandleConfigChanged Parms{};

	Parms.Mode = Mode;
	Parms.Config = Config;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.Handle Config Changed STW Build Mode
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Config                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadMappingInfo_C::Handle_Config_Changed_STW_Build_Mode(int32 Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "Handle Config Changed STW Build Mode");

	Params::GamepadMappingInfo_C_Handle_Config_Changed_STW_Build_Mode Parms{};

	Parms.Config = Config;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.Handle Config Changed STW Combat Mode
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Config                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadMappingInfo_C::Handle_Config_Changed_STW_Combat_Mode(int32 Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "Handle Config Changed STW Combat Mode");

	Params::GamepadMappingInfo_C_Handle_Config_Changed_STW_Combat_Mode Parms{};

	Parms.Config = Config;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.Handle Config Changed Hide or Show Unused Text Lines
// (Public, BlueprintCallable, BlueprintEvent)

void UGamepadMappingInfo_C::Handle_Config_Changed_Hide_or_Show_Unused_Text_Lines()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "Handle Config Changed Hide or Show Unused Text Lines");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.InitializeListOfButtonLabelTextWidgets
// (Public, BlueprintCallable, BlueprintEvent)

void UGamepadMappingInfo_C::InitializeListOfButtonLabelTextWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "InitializeListOfButtonLabelTextWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.InitializeListOfButtonTextForSTWCombatProBuild
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     ButtonTextLabels                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UGamepadMappingInfo_C::InitializeListOfButtonTextForSTWCombatProBuild(TArray<class FText>& ButtonTextLabels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "InitializeListOfButtonTextForSTWCombatProBuild");

	Params::GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProBuild Parms{};

	Parms.ButtonTextLabels = std::move(ButtonTextLabels);

	UObject::ProcessEvent(Func, &Parms);

	ButtonTextLabels = std::move(Parms.ButtonTextLabels);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.GetDesiredSlateVisibilityForAbilityChordFromTextDisplay
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UTextBlock*                       TextWidget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESlateVisibility                        DesiredSlateVisibility                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadMappingInfo_C::GetDesiredSlateVisibilityForAbilityChordFromTextDisplay(class UTextBlock* TextWidget, ESlateVisibility* DesiredSlateVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "GetDesiredSlateVisibilityForAbilityChordFromTextDisplay");

	Params::GamepadMappingInfo_C_GetDesiredSlateVisibilityForAbilityChordFromTextDisplay Parms{};

	Parms.TextWidget = TextWidget;

	UObject::ProcessEvent(Func, &Parms);

	if (DesiredSlateVisibility != nullptr)
		*DesiredSlateVisibility = Parms.DesiredSlateVisibility;
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.SetTextFieldVisibilityForExtraLine
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextBlock*                       TextWidget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadMappingInfo_C::SetTextFieldVisibilityForExtraLine(class UTextBlock* TextWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "SetTextFieldVisibilityForExtraLine");

	Params::GamepadMappingInfo_C_SetTextFieldVisibilityForExtraLine Parms{};

	Parms.TextWidget = TextWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.InitializeListOfButtonTextForSTWCombatProCombat
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     ButtonTextLabels                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UGamepadMappingInfo_C::InitializeListOfButtonTextForSTWCombatProCombat(TArray<class FText>& ButtonTextLabels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "InitializeListOfButtonTextForSTWCombatProCombat");

	Params::GamepadMappingInfo_C_InitializeListOfButtonTextForSTWCombatProCombat Parms{};

	Parms.ButtonTextLabels = std::move(ButtonTextLabels);

	UObject::ProcessEvent(Func, &Parms);

	ButtonTextLabels = std::move(Parms.ButtonTextLabels);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.ClearAllComboTextLines
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGamepadMappingInfo_C::ClearAllComboTextLines()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "ClearAllComboTextLines");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.GetControllerImage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        Texture                                                (Parm, OutParm, HasGetValueTypeHash)

void UGamepadMappingInfo_C::GetControllerImage(TSoftObjectPtr<class UTexture2D>* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "GetControllerImage");

	Params::GamepadMappingInfo_C_GetControllerImage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Texture != nullptr)
		*Texture = Parms.Texture;
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.GetLineImage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        Texture                                                (Parm, OutParm, HasGetValueTypeHash)

void UGamepadMappingInfo_C::GetLineImage(TSoftObjectPtr<class UTexture2D>* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "GetLineImage");

	Params::GamepadMappingInfo_C_GetLineImage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Texture != nullptr)
		*Texture = Parms.Texture;
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.InitializeListOfButtonTextForSTW_BuilderProBuild
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     ButtonTextLabels                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UGamepadMappingInfo_C::InitializeListOfButtonTextForSTW_BuilderProBuild(TArray<class FText>& ButtonTextLabels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "InitializeListOfButtonTextForSTW_BuilderProBuild");

	Params::GamepadMappingInfo_C_InitializeListOfButtonTextForSTW_BuilderProBuild Parms{};

	Parms.ButtonTextLabels = std::move(ButtonTextLabels);

	UObject::ProcessEvent(Func, &Parms);

	ButtonTextLabels = std::move(Parms.ButtonTextLabels);
}


// Function GamepadMappingInfo.GamepadMappingInfo_C.SetButtonTextLabelsFromTextArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UGamepadMappingInfo_C::SetButtonTextLabelsFromTextArray(TArray<class FText>& Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadMappingInfo_C", "SetButtonTextLabelsFromTextArray");

	Params::GamepadMappingInfo_C_SetButtonTextLabelsFromTextArray Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
}

}

