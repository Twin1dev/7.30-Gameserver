#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinigameMode_ObstacleCourse

#include "Basic.hpp"

#include "MinigameMode_ObstacleCourse_classes.hpp"
#include "MinigameMode_ObstacleCourse_parameters.hpp"


namespace SDK
{

// Function MinigameMode_ObstacleCourse.MinigameMode_ObstacleCourse_C.ExecuteUbergraph_MinigameMode_ObstacleCourse
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMinigameMode_ObstacleCourse_C::ExecuteUbergraph_MinigameMode_ObstacleCourse(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinigameMode_ObstacleCourse_C", "ExecuteUbergraph_MinigameMode_ObstacleCourse");

	Params::MinigameMode_ObstacleCourse_C_ExecuteUbergraph_MinigameMode_ObstacleCourse Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MinigameMode_ObstacleCourse.MinigameMode_ObstacleCourse_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AMinigameMode_ObstacleCourse_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinigameMode_ObstacleCourse_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinigameMode_ObstacleCourse.MinigameMode_ObstacleCourse_C.On Stat Changed
// (BlueprintCallable, BlueprintEvent)

void AMinigameMode_ObstacleCourse_C::On_Stat_Changed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinigameMode_ObstacleCourse_C", "On Stat Changed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinigameMode_ObstacleCourse.MinigameMode_ObstacleCourse_C.HandleMinigameWarmup
// (Event, Protected, BlueprintEvent)

void AMinigameMode_ObstacleCourse_C::HandleMinigameWarmup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinigameMode_ObstacleCourse_C", "HandleMinigameWarmup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinigameMode_ObstacleCourse.MinigameMode_ObstacleCourse_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AMinigameMode_ObstacleCourse_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinigameMode_ObstacleCourse_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinigameMode_ObstacleCourse.MinigameMode_ObstacleCourse_C.SetPlayerPositionToStart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMinigameMode_ObstacleCourse_C::SetPlayerPositionToStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinigameMode_ObstacleCourse_C", "SetPlayerPositionToStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinigameMode_ObstacleCourse.MinigameMode_ObstacleCourse_C.GiveWood
// (Public, BlueprintCallable, BlueprintEvent)

void AMinigameMode_ObstacleCourse_C::GiveWood()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinigameMode_ObstacleCourse_C", "GiveWood");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MinigameMode_ObstacleCourse.MinigameMode_ObstacleCourse_C.GetStartQueryForPlayer
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagQuery                ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FGameplayTagQuery AMinigameMode_ObstacleCourse_C::GetStartQueryForPlayer(class APlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinigameMode_ObstacleCourse_C", "GetStartQueryForPlayer");

	Params::MinigameMode_ObstacleCourse_C_GetStartQueryForPlayer Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MinigameMode_ObstacleCourse.MinigameMode_ObstacleCourse_C.Has Player Completed Objective
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AFortPlayerState*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Complete                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMinigameMode_ObstacleCourse_C::Has_Player_Completed_Objective(class AFortPlayerState* Player, bool* Complete) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MinigameMode_ObstacleCourse_C", "Has Player Completed Objective");

	Params::MinigameMode_ObstacleCourse_C_Has_Player_Completed_Objective Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Complete != nullptr)
		*Complete = Parms.Complete;
}

}

