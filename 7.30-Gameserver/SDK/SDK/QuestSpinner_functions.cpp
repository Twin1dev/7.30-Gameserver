#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuestSpinner

#include "Basic.hpp"

#include "QuestSpinner_classes.hpp"
#include "QuestSpinner_parameters.hpp"


namespace SDK
{

// Function QuestSpinner.QuestSpinner_C.ExecuteUbergraph_QuestSpinner
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UQuestSpinner_C::ExecuteUbergraph_QuestSpinner(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestSpinner_C", "ExecuteUbergraph_QuestSpinner");

	Params::QuestSpinner_C_ExecuteUbergraph_QuestSpinner Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestSpinner.QuestSpinner_C.OnSpinComplete
// (BlueprintCallable, BlueprintEvent)

void UQuestSpinner_C::OnSpinComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestSpinner_C", "OnSpinComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QuestSpinner.QuestSpinner_C.SetQuests
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UFortQuestItem*>           Quests                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                                   Param_SpinPeriod                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UQuestSpinner_C::SetQuests(TArray<class UFortQuestItem*>& Quests, float Param_SpinPeriod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestSpinner_C", "SetQuests");

	Params::QuestSpinner_C_SetQuests Parms{};

	Parms.Quests = std::move(Quests);
	Parms.Param_SpinPeriod = Param_SpinPeriod;

	UObject::ProcessEvent(Func, &Parms);

	Quests = std::move(Parms.Quests);
}


// Function QuestSpinner.QuestSpinner_C.BeginSpinDelayTimer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UQuestSpinner_C::BeginSpinDelayTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestSpinner_C", "BeginSpinDelayTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QuestSpinner.QuestSpinner_C.OnSpinDelayTimerComplete
// (Public, BlueprintCallable, BlueprintEvent)

void UQuestSpinner_C::OnSpinDelayTimerComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestSpinner_C", "OnSpinDelayTimerComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QuestSpinner.QuestSpinner_C.IncrementPoolIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UQuestSpinner_C::IncrementPoolIndex(int32* NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestSpinner_C", "IncrementPoolIndex");

	Params::QuestSpinner_C_IncrementPoolIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewValue != nullptr)
		*NewValue = Parms.NewValue;
}

}

