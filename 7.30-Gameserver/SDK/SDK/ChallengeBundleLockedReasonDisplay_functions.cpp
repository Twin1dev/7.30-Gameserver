#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeBundleLockedReasonDisplay

#include "Basic.hpp"

#include "ChallengeBundleLockedReasonDisplay_classes.hpp"
#include "ChallengeBundleLockedReasonDisplay_parameters.hpp"


namespace SDK
{

// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.ExecuteUbergraph_ChallengeBundleLockedReasonDisplay
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallengeBundleLockedReasonDisplay_C::ExecuteUbergraph_ChallengeBundleLockedReasonDisplay(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeBundleLockedReasonDisplay_C", "ExecuteUbergraph_ChallengeBundleLockedReasonDisplay");

	Params::ChallengeBundleLockedReasonDisplay_C_ExecuteUbergraph_ChallengeBundleLockedReasonDisplay Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UChallengeBundleLockedReasonDisplay_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeBundleLockedReasonDisplay_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.SetLockReason
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFortChallengeBundleInfoLockedReasonInValue                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UChallengeBundleLockedReasonDisplay_C::SetLockReason(const struct FFortChallengeBundleInfoLockedReason& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeBundleLockedReasonDisplay_C", "SetLockReason");

	Params::ChallengeBundleLockedReasonDisplay_C_SetLockReason Parms{};

	Parms.InValue = std::move(InValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.UpdateLockReasonDisplay
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UChallengeBundleLockedReasonDisplay_C::UpdateLockReasonDisplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeBundleLockedReasonDisplay_C", "UpdateLockReasonDisplay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.SetTimespanSource
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IFortTimespanDataSource>Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UChallengeBundleLockedReasonDisplay_C::SetTimespanSource(TScriptInterface<class IFortTimespanDataSource> Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeBundleLockedReasonDisplay_C", "SetTimespanSource");

	Params::ChallengeBundleLockedReasonDisplay_C_SetTimespanSource Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.HandleTick
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallengeBundleLockedReasonDisplay_C::HandleTick(class UObject* Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeBundleLockedReasonDisplay_C", "HandleTick");

	Params::ChallengeBundleLockedReasonDisplay_C_HandleTick Parms{};

	Parms.Source = Source;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeBundleLockedReasonDisplay.ChallengeBundleLockedReasonDisplay_C.GetTimeSpanValue
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FTimespan                        Result                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UChallengeBundleLockedReasonDisplay_C::GetTimeSpanValue(struct FTimespan* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeBundleLockedReasonDisplay_C", "GetTimeSpanValue");

	Params::ChallengeBundleLockedReasonDisplay_C_GetTimeSpanValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}

}

